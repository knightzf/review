#include "header.h"

class Solution {
public:
    double minAreaFreeRect(vector<vector<int>>& points) {
        int n = points.size();        
        
        map<vector<int>, int> s;
        for(int i = 0; i < n; ++i)
        {
            s[points[i]] = i;
        }

        set<vector<int>> mm;

        double res = INT_MAX;

        auto dis = [](const vector<int>& a, const vector<int>& b)
        {
            return sqrt(pow(a[1] - b[1], 2) + pow(a[0] - b[0], 2));
        };

        auto equal = [](double x, double y)
        {
            return fabs(x - y) < 1e-5;
        };

        auto rect = [&](const vector<int>& a, const vector<int>& b, const vector<int>& c)
        {
            if((a[0] == c[0] && b[1] == c[1]) || (b[0] == c[0] && a[1] == c[1])) return true;
            if(a[0] == c[0] || b[0] == c[0]) return false;
            double slope1 = double(a[1] - c[1]) / (a[0] - c[0]);
            double slope2 = double(b[1] - c[1]) / (b[0] - c[0]);
            return equal(slope1 * slope2, -1.0);
        };

        for(int i = 0; i < n; ++i)
        {
            for(int j = i + 1; j < n; ++j)
            {
                const auto& a = points[i];
                const auto& b = points[j];

                int x = a[0] + b[0];
                int y = a[1] + b[1];
                
                for(int k = 0; k < n; ++k)
                {
                    if(k != i && k != j)
                    {
                        const auto& c = points[k];
                        auto iter = s.find(vector<int>{x - c[0], y - c[1]});
                        if(iter != s.end())
                        {
                            vector<int> t{i, j, k, iter->second};
                            sort(t.begin(), t.end());
                            if(mm.count(t)) continue;
                            mm.insert(t);

                            if(rect(a, b, c))
                            {
                                res = min(res, dis(a, c) * dis(b, c));
                            }                         
                        }
                    }
                }
            }
        }

        return res == INT_MAX ? 0 : res;
    }
};

int main()
{
    Solution s;
    vector<vector<int>> a{{9785,19053},{19628,20144},{9417,933},{3762,9316},{11749,10184},{10638,12408},{938,13724},{18339,19168},{8279,8840},{751,18471},{9431,795},{8571,10791},{14120,13991},{15732,11984},{19936,356},{13413,6007},{13192,21785},{12180,13356},{8482,10154},{21519,16004},{4768,15372},{6975,7919},{18719,18384},{8794,14274},{14267,8191},{4449,429},{8744,6048},{3822,10760},{26053,16401},{3719,7639},{20849,15663},{13183,8661},{2992,8427},{1069,5231},{9317,8540},{4017,9005},{8775,8819},{12363,11709},{11444,22787},{5316,20447},{10432,16434},{4045,11942},{7135,7599},{3074,15796},{5846,3502},{4525,14389},{17768,17718},{25064,20441},{29701,10473},{17075,15887},{5380,4686},{9595,13029},{4221,22793},{10171,12408},{8128,7392},{4464,9298},{4421,7621},{11522,22340},{17165,5469},{10511,14686},{5746,15942},{11152,12594},{13516,10341},{5231,11887},{10406,1691},{11559,7343},{6703,15469},{11663,4867},{28594,8903},{687,12172},{5800,13642},{9528,12761},{13550,12654},{12852,5974},{12713,8758},{471,19701},{2126,991},{12740,4042},{15193,16153},{9077,5300},{15844,20279},{6815,17531},{13677,8785},{2734,13518},{10686,10192},{19288,16540},{1997,8113},{20529,10785},{8410,8820},{15281,10691},{14392,5972},{6719,12560},{8050,223},{23287,14733},{9415,24044},{11103,7407},{11999,10400},{15936,11051},{9161,7291},{14549,7804},{6741,6521},{5788,15264},{12810,8986},{19379,9036},{1916,9547},{16974,17922},{7104,25731},{15521,16454},{11013,5547},{8929,14556},{9304,12817},{13072,9658},{3229,14833},{9295,10213},{20499,16405},{3060,1921},{14834,13857},{4145,6022},{7402,19474},{10297,5619},{8269,7543},{21507,4587},{4399,4506},{7045,5739},{9631,9379},{11004,17036},{2383,18979},{4592,15217},{6385,8153},{15820,20620},{23948,10583},{6064,11812},{15008,8228},{3555,4788},{9980,15656},{12558,9954},{3490,5635},{7937,17036},{425,3511},{7594,783},{10256,2886},{1663,18643},{11681,14011},{12488,16849},{14963,4864},{13688,8314},{17052,22832},{17325,2857},{23050,14519},{13898,13676},{3805,14053},{10316,17705},{15644,18924},{15203,8104},{10549,5124},{197,5018},{6956,13680},{861,18768},{15578,12492},{12076,11927},{15204,16821},{11155,10585},{4158,6618},{3451,4398},{9306,7757},{616,18189},{6001,5846},{5645,14879},{3469,5735},{12284,4602},{11240,10846},{4810,10512},{6767,14384},{11262,14076},{7506,6857},{4843,14115},{589,4465},{9567,6015},{12401,12251},{5488,11532},{7355,6045},{13577,3129},{3940,8535},{13448,11576},{11336,9087},{5947,2397},{1090,5131},{7526,3251},{7147,5245},{4515,18036},{9371,13085},{15800,12807},{8945,10955},{13580,14348},{10439,14120},{8387,14824},{18615,12523},{4463,291},{4462,5406},{9451,427}};
    s.minAreaFreeRect(a);
}


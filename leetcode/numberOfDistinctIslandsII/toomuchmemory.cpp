#include "header.h"

class Solution {
private:
    int m;
    int n;
public:
    int numDistinctIslands2(vector<vector<int>>& grid) {
        m = grid.size(), n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));

        unordered_map<int, unordered_set<string>> islands;
        int id = 0;
        int dup = 0;
        for(int i = 0; i < m; ++i) {
            for(int j = 0; j < n; ++j) {
                if(grid[i][j] && !visited[i][j])
                {
                    ++id;

                    int xMin = i, xMax = i;
                    int yMin = j, yMax = j;
                    bfs(grid, visited, make_pair(i, j), xMin, xMax, yMin, yMax, id);

                    string a = pattern(visited, xMin, xMax, yMin, yMax, true, id);
                    if(islands.count(yMax - yMin + 1) && islands[yMax - yMin + 1].count(a)) {
                        ++dup;
                        continue;
                    }

                    islands[yMax - yMin + 1].insert(a);
                    islands[yMax - yMin + 1].insert(revertPattern(a, yMax - yMin + 1));
                    reverse(a.begin(), a.end());
                    islands[yMax - yMin + 1].insert(a);
                    islands[yMax - yMin + 1].insert(revertPattern(a, yMax - yMin + 1));


                    string b = pattern(visited, xMin, xMax, yMin, yMax, false, id);
                    //islands.insert(b);
                    islands[xMax - xMin + 1].insert(revertPattern(b, xMax - xMin + 1));
                    reverse(b.begin(), b.end());
                    //islands.insert(b);
                    islands[xMax - xMin + 1].insert(revertPattern(b, xMax - xMin + 1));
                }
            }
        }

        return id - dup;
    }

    string revertPattern(const string& a, int len)
    {
        string res;
        for(int i = a.size() - len; i >= 0; i -= len)
        {
            res += a.substr(i, len);
        }
        return res;
    }

    string pattern(vector<vector<int>>& grid, int xMin, int xMax, int yMin, int yMax, bool mode, int id)
    {
        stringstream ss;
        if(mode) {
            for(int i = xMin; i <= xMax; ++i) {
                for(int j = yMin; j <= yMax; ++j) {
                    ss << (grid[i][j] == id ? 1 : 0);
                }
            }
        }
        else {            
            for(int j = yMin; j <= yMax; ++j) {
                for(int i = xMin; i <= xMax; ++i) {
                    ss << (grid[i][j] == id ? 1 : 0);
                }
            }
        }
        return ss.str();
    }

    void bfs(vector<vector<int>>& grid, vector<vector<int>>& visited,
        const pair<int, int>& p, int& xMin, int& xMax, int& yMin, int& yMax, int id)
    {
        static vector<int> diff{-1, 0, 1, 0, -1};
        deque<pair<int, int>> q;
        q.push_back(p);

        while(!q.empty()) {
            const auto& point = q.front();
            visited[point.first][point.second] = id;
            xMin = min(xMin, point.first);
            xMax = max(xMax, point.first);
            yMin = min(yMin, point.second);
            yMax = max(yMax, point.second);

            for(int i = 0; i < 5; ++i)
            {
                int x = point.first + diff[i];
                int y = point.second + diff[i + 1];
                if(x >= 0 && x < m && y >= 0 && y < n && !visited[x][y] && grid[x][y]) {
                    q.push_back(make_pair(x, y));
                }
            }

            q.pop_front();
        }
    }
};

int main() {
    Solution s;
    vector<vector<int>> a{{0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1,0,0,1,0,1,1,1,1,0,0},{1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,0,1,1,0,0,1,1,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,0,1,0,0},{0,1,1,0,1,0,1,1,0,1,1,1,1,0,0,1,0,1,1,0,1,0,0,0,1,0,0,1,1,0,0,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,1,1,0,0},{0,1,0,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,1},{0,1,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,0,0,1,1,0,1,1,0,0,1,0,0,0,0},{1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,1,1,1,0,1,0,0,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,0,0,0,1,0},{0,1,0,1,0,1,1,0,0,1,1,1,0,0,0,1,1,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,1,0,0,0,0},{1,1,1,0,0,1,0,0,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,0,1,1,1,1,0,0,0,1,1},{1,0,0,1,0,1,0,1,1,0,1,0,1,0,0,1,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,1,0},{1,1,1,0,0,1,1,1,0,0,1,1,0,1,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0},{1,1,0,1,0,0,0,1,0,0,0,1,0,1,1,1,1,0,1,1,1,0,1,0,0,0,0,1,0,0,1,1,1,1,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,0},{0,1,1,0,0,1,0,0,1,1,1,0,0,0,0,1,1,1,1,0,1,1,0,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1},{0,0,1,0,0,1,1,0,0,1,0,0,1,1,0,1,0,1,1,0,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,0},{0,1,0,0,0,1,1,0,0,1,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,0,0,1,0,0,0,1,1},{1,0,0,0,0,1,1,1,0,1,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0,0},{1,0,0,0,0,1,0,0,0,0,1,1,0,0,1,0,1,1,1,0,0,0,1,0,0,0,0,1,1,1,1,0,1,0,0,1,0,1,1,0,0,1,0,0,0,1,0,0,1,0},{0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,0,0,1,0},{1,0,1,0,1,1,1,1,1,0,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1},{0,1,0,1,1,0,0,1,1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,0,1,1,0,0,0,1,1,0,0,0,0,1,0,1,1,0,1,1,0},{0,1,0,0,0,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,0,0,1,0,0,0,1,1,1,1,0,1,0,1,0,0,1,0,0,1,0},{0,0,1,0,0,1,0,0,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1},{0,0,1,0,1,1,1,0,1,1,1,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,1,0,0,1,0,0},{0,1,0,0,1,0,0,0,0,1,0,0,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1},{0,0,1,1,1,0,1,0,0,0,0,1,0,0,1,1,0,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0,0,0,1,1,1,1,0,1,1,0,0,0,1,0,0,0,1},{1,1,0,1,1,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1},{1,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,1,0,1,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,0,0,0,0,1,0,1,1,0,0},{1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1,0,0,1,0,0,1,0,0,0,0,1,1,0,1,1,0,1,1,1,1},{0,1,1,0,1,1,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,1,0,0,1,0,1,1,1,0},{0,1,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,1,0,1,1,0,1,0,1,1,1,0,0,0,1,0,1,1},{1,1,1,1,0,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,1,1,1,0},{0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,0,1,1,1,0,0,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,1,1,1,0,0},{0,1,0,0,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,0,0,1,0,1,1,1,0,1,0},{0,0,0,1,0,0,1,0,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0},{0,1,1,1,0,1,1,0,0,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1},{0,1,1,1,1,1,0,0,0,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,1,0,1,1,1,0,0,1},{1,0,1,1,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,1,0,0,0,1,0,1,1,1,0,0,1,0,1,0,1,1,0,0,0,0,1,1,1,0,1,1},{1,1,1,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,1,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,1,1,1,1,1,0,0,0,1,0,1},{0,1,1,0,0,1,0,0,1,1,1,1,0,1,0,0,0,0,1,0,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,1,0,0,1,0,1,1,1,1,0,1,1,0,0,1}};
    cout<<s.numDistinctIslands2(a)<<endl;
}

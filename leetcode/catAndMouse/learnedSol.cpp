#include "header.h"

class Solution {
public:
    int catMouseGame(vector<vector<int>>& graph) {
        int n = graph.size();
        int DRAW = 0, MOUSE = 1, CAT = 2;

        vector<vector<vector<int>>> color(50, vector<vector<int>>(50, vector<int>(3, 0)));
        vector<vector<vector<int>>> degree(50, vector<vector<int>>(50, vector<int>(3, 0)));

        for(int i = 0; i < n; ++i)
        {
            for(int j = 0; j < n; ++j)
            {
                degree[i][j][1] = graph[i].size();
                degree[i][j][2] = graph[j].size();
                for(int k : graph[j])
                {
                    if(k == 0)
                    {
                        --degree[i][j][2];
                        break;
                    }
                }
            }
        }

        queue<vector<int>> q;
        for(int i = 0; i < n; ++i)
        {
            for(int j = 1; j <= 2; ++j)
            {
                color[0][i][j] = MOUSE;                
                q.push({0, i, j, MOUSE});
                if(i > 0)
                {
                    color[i][i][j] = CAT;
                    q.push({i, i, j, CAT});
                }
            }
        }

        auto getParents = [&](int mouse, int cat, int move)
        {
            vector<vector<int>> res;
            if(move == 2)
            {
                for(int k : graph[mouse])
                {                    
                    res.push_back({k, cat, 3 - move});
                }
            }
            else
            {
                for(int k : graph[cat])
                {
                    if(k != 0)
                    res.push_back({mouse, k, 3 - move});
                }
            }            
            return res;
        };

        while(!q.empty())
        {
            const auto& v = q.front();
            int mouse = v[0], cat = v[1], move = v[2], clr = v[3];
            for(const auto& parent : getParents(mouse, cat, move))
            {
                if (color[parent[0]][parent[1]][parent[2]] == DRAW) {
                    if(parent[2] == clr)
                    {
                        color[parent[0]][parent[1]][parent[2]] = clr;
                        q.push({parent[0], parent[1], parent[2], clr});
                    }
                    else
                    {
                        --degree[parent[0]][parent[1]][parent[2]];
                        if(degree[parent[0]][parent[1]][parent[2]] == 0)
                        {
                            color[parent[0]][parent[1]][parent[2]] = 3 - parent[2];
                            q.push({parent[0], parent[1], parent[2], 3 - parent[2]});
                        }
                    }
                }          
            }
            q.pop();
        }
        return color[1][2][1];
    }
};

int main()
{
    Solution s;
    if(1)
    {
        vector<vector<int>> a{{2,5},{3},{0,4,5},{1,4,5},{2,3},{0,2,3}};
        cout<<s.catMouseGame(a)<<endl;
    }
    if(1)
    {
        vector<vector<int>> a{{6},{4},{9},{5},{1,5},{3,4,6},{0,5,10},{8,9,10},{7},{2,7},{6,7}};
        cout<<s.catMouseGame(a)<<endl;
    }
    if(1)
    {
        vector<vector<int>> a{{9,16,17,29,32,43},{12,16,20,32,48},{8,12,16,21,24,43,45,46},{8,10,16,27},{5,8,10,13,21,25,26,37,48},{4,7,12,23,28,33,35,48},{10,20,22,25,26,31,45,46,47},{5,10},{2,3,4,30,41},{0,17,29},{3,4,6,7,21,23,25,29,38},{22,35,41},{1,2,5,17,19,22,28,31,44},{4,15,16,23,33,39,40,44,49},{19,23,24,26,27,34,45,46,47},{13,26,31,32,37,44,45},{0,1,2,3,13,32,34,49},{0,9,12,19,20,32,36},{38},{12,14,17,21,30,42},{1,6,17,21,23,36,38,45},{2,4,10,19,20,31,45,47},{6,11,12,25,26,27,48},{5,10,13,14,20,44,48},{2,14,26,29,34},{4,6,10,22,30,40,47},{4,6,14,15,22,24,30,43,49},{3,14,22,34,35,43,44},{5,12,43,48},{0,9,10,24,33,47},{8,19,25,26,37,40,42,48},{6,12,15,21,37,39,42,44,49},{0,1,15,16,17,49},{5,13,29,35,43,47},{14,16,24,27,36,38},{5,11,27,33,42,48},{17,20,34,40},{4,15,30,31,45,46},{10,18,20,34},{13,31,40},{13,25,30,36,39,41,42,46,47},{8,11,40,43,45},{19,30,31,35,40},{0,2,26,27,28,33,41},{12,13,15,23,27,31,49},{2,6,14,15,20,21,37,41,46,49},{2,6,14,37,40,45},{6,14,21,25,29,33,40},{1,4,5,22,23,28,30,35},{13,16,26,31,32,44,45}};
        cout<<s.catMouseGame(a)<<endl;
    }
    if(1)
    {
        vector<vector<int>> a{{1,4,5,7,9,16,27,29,30,36,39,43,45},{0,2,4,11,12,13,18,29,31,45},{1,6,8,13,15,18,20,21,24,27,30,32,40,44},{4,5,9,13,19,24,30,37,38,39,41,46},{0,1,3,14,27,28,30,33,44,47},{0,3,7,9,19,21,27,29,30,32,33,35},{2,7,12,13,17,22,23,26,41,45},{0,5,6,17,20,22,24,28,29,36},{2,9,11,12,14,15,18,26,27,36,47,49},{0,3,5,8,10,11,13,22,25,27,33,36,39,40},{9,28,38,44,46,48},{1,8,9,12,15,20,22,25,33,38,46,47},{1,6,8,11,21,22,23,27,32,44,46,48},{1,2,3,6,9,21,28,37,48},{4,8,17,19,23,36,37,43,44,49},{2,8,11,24,26,33,37,43,46,47},{0,20,27,32,36,41,47,48},{6,7,14,20,25,27,38},{1,2,8,19,31,33,34,38},{3,5,14,18,27,28,33,38,47,48},{2,7,11,16,17,26,30,41,42,43},{2,5,12,13,31,34,37,46},{6,7,9,11,12,24,25,28,29,30,36,43,49},{6,12,14,25,28,30,31,33,35,38,44,49},{2,3,7,15,22,25,29,31,32,41,43,45},{9,11,17,22,23,24,31,32,35,38},{6,8,15,20,30,36,43,45,48},{0,2,4,5,8,9,12,16,17,19,30,35,36,47,49},{4,7,10,13,19,22,23,33,43,44,45,49},{0,1,5,7,22,24,37,41,45},{0,2,3,4,5,20,22,23,26,27,32,33,39,42,46,48},{1,18,21,23,24,25,33,35,41,42,44},{2,5,12,16,24,25,30,34,46},{4,5,9,11,15,18,19,23,28,30,31},{18,21,32,35,36,37,41,47,49},{5,23,25,27,31,34,41,44},{0,7,8,9,14,16,22,26,27,34,42,46},{3,13,14,15,21,29,34,42,44,46,48},{3,10,11,17,18,19,23,25,39},{0,3,9,30,38,46},{2,9,41,42,48},{3,6,16,20,24,29,31,34,35,40,44},{20,30,31,36,37,40,43},{0,14,15,20,22,24,26,28,42},{2,4,10,12,14,23,28,31,35,37,41},{0,1,6,24,26,28,29,48},{3,10,11,12,15,21,30,32,36,37,39,48},{4,8,11,15,16,19,27,34},{10,12,13,16,19,26,30,37,40,45,46},{8,14,22,23,27,28,34}};
        cout<<s.catMouseGame(a)<<endl;
    }
    if(1)
    {
        vector<vector<int>> a{{3,4,6,7,9,15,16,18},{4,5,8,19},{4,5,6,7,9,18},{0,10,11,15},{0,1,2,6,10,12,14,16},{1,2,7,9,15,17,18},{0,2,4,7,9,10,11,12,13,14,15,17,19},{0,2,5,6,9,16,17},{1,9,14,15,16,19},{0,2,5,6,7,8,10,11,13,15,16,17,18},{3,4,6,9,17,18},{3,6,9,12,19},{4,6,11,15,17,19},{6,9,15,17,18,19},{4,6,8,15,19},{0,3,5,6,8,9,12,13,14,16,19},{0,4,7,8,9,15,17,18,19},{5,6,7,9,10,12,13,16},{0,2,5,9,10,13,16},{1,6,8,11,12,13,14,15,16}};
        cout<<s.catMouseGame(a)<<endl;
    }
}
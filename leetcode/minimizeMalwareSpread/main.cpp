#include "header.h"

class Solution {
private:
    unordered_map<int, int> parent;
    unordered_map<int, int> count;
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size(); 
        parent.clear();
        count.clear();   
        for(int i = 0; i < n; ++i) {
            parent[i] = i; count[i] = 1;
        }
        vector<int> visited(n, false);

        for(int i = 0; i < n; ++i)
        {
            for(int j = 0; j < n; ++j)
            {
                if(graph[i][j])
                {
                    int pi = findParent(i);
                    int pj = findParent(j);
                    if(pi != pj)
                    {
                        parent[pi] = pj;
                        count[pj] += count[pi];
                    }
                }
            }
        }

        sort(initial.begin(), initial.end());
        map<int, vector<int>> m;
        for(int i : initial)
        {
            m[findParent(i)].push_back(i);
        }

        int minCount = 0;
        int minIdx = initial[0];

        for(const auto& p : m)
        {
            if(p.second.size() == 1)
            {
                if(count[p.first] > minCount)
                {
                    minCount = count[p.first];
                    minIdx = p.second[0];
                }
            }
        }
        return minIdx;
    }

    int findParent(int i)
    {
        while(parent[i] != i)
        {
            parent[i] = parent[parent[i]];
            i = parent[i];
        }
        return i;
    }
};

int main()
{
    Solution s;
    vector<vector<int>> a{{1,0,0,0},{0,1,0,0},{0,0,1,1},{0,0,1,1}};
    vector<int> b{3, 1};
    cout<<s.minMalwareSpread(a, b)<<endl;
}